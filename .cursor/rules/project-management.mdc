---
description: "プロジェクト管理と品質保証 - タスク管理、リーダーシップ、品質制御"
auto_attachments: ["*.md", "package.json", "*.json", "README.md"]
---

# project-management.mdc - プロジェクト管理と品質保証

## 📋 タスク管理

### タスク管理原則
- **明確性**: 曖昧な表現禁止
- **完了条件**: 明確な完了基準設定
- **優先順位**: 重要度・緊急度明示
- **担当者**: 責任者明確化

### タスク記録フォーマット
```markdown
## 🎯 [タスク名]
- **優先度**: 🔴高 / 🟡中 / 🟢低
- **担当**: [担当者名]
- **締切**: YYYY-MM-DD
- **完了条件**: 具体的な完了基準
- **進捗**: 0-100%
- **メモ**: 追加情報
```

### タスク状態管理
- **📝 TODO**: 未着手
- **🔄 DOING**: 実行中
- **✅ DONE**: 完了
- **❌ CANCELLED**: 中止

## 🚀 デプロイメント

### デプロイ戦略
- **本番環境**: 慎重なリリース手順
- **ステージング**: 本番同等のテスト環境
- **開発環境**: 頻繁なデプロイ・テスト

### CI/CD基本設定
```yaml
# .github/workflows/deploy.yml
name: Deploy
on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test
      
      - name: Build
        run: npm run build
      
      - name: Deploy
        run: npm run deploy
```

### デプロイチェックリスト
- [ ] テストが全て通る
- [ ] ビルドが成功する
- [ ] セキュリティスキャンが完了
- [ ] バックアップが取得済み
- [ ] ロールバック手順が確認済み

## 📊 監視・品質管理

### 重要指標（KPIs）
- **稼働率**: 99.9%以上
- **応答時間**: 平均2秒以内
- **エラー率**: 0.1%以下
- **テストカバレッジ**: 80%以上

### 監視項目
```javascript
// 基本的な監視設定
const monitoring = {
  health: '/health',
  metrics: '/metrics',
  logs: 'structured-json',
  alerts: {
    errorRate: { threshold: 0.01, action: 'notify' },
    responseTime: { threshold: 5000, action: 'alert' },
    uptime: { threshold: 0.999, action: 'escalate' }
  }
};
```

### アラート設定
- **Critical**: 即座に対応が必要
- **Warning**: 1時間以内に確認
- **Info**: 日次レビューで確認

## 🤝 チーム協業

### コミュニケーション原則
- **透明性**: 情報は共有する
- **非同期優先**: 時間帯を考慮
- **ドキュメント**: 決定事項は記録
- **フィードバック**: 建設的な意見交換

### コードレビュー
- **全変更**: プルリクエストで確認
- **レビュー時間**: 24時間以内
- **フィードバック**: 具体的で建設的
- **承認**: 最低1名のレビュー

### 会議運営
- **目的明確**: アジェンダ事前共有
- **時間厳守**: 開始・終了時刻を守る
- **アクションアイテム**: 担当者と期限を明確化
- **議事録**: 決定事項を記録

## 📚 ドキュメント管理

### ドキュメント種類
- **README**: プロジェクト概要・セットアップ
- **API文書**: エンドポイント・パラメータ
- **設計書**: アーキテクチャ・データモデル
- **運用手順**: デプロイ・監視・障害対応

### ドキュメント作成原則
```markdown
# タイトル
## 概要
- 何をするドキュメントか
- 対象読者は誰か

## 前提条件
- 必要な知識・ツール
- 環境設定

## 手順
1. 具体的なステップ
2. 実行コマンド例
3. 期待される結果

## トラブルシューティング
- よくある問題と解決法
- 問い合わせ先
```

### ドキュメント更新
- **定期レビュー**: 月1回の内容確認
- **変更時更新**: 機能変更時に必ず更新
- **バージョン管理**: 重要な変更は履歴を記録

## 🔄 品質保証プロセス

### 品質ゲート
1. **開発段階**: 単体テスト・コードレビュー
2. **統合段階**: 結合テスト・セキュリティスキャン
3. **リリース段階**: 受入テスト・パフォーマンス確認

### 品質チェックリスト
- [ ] コーディング規約準拠
- [ ] テストカバレッジ基準達成
- [ ] セキュリティ脆弱性なし
- [ ] パフォーマンス要件満足
- [ ] ドキュメント完備

## 📈 プロジェクト進捗管理

### 進捗報告
```markdown
## 週次進捗報告
### 今週の成果
- 完了したタスク
- 主要な成果物

### 来週の予定
- 予定しているタスク
- 重要なマイルストーン

### 課題・リスク
- 現在の課題
- 対応が必要な事項
```

### マイルストーン管理
- **設計完了**: 要件定義・設計書完成
- **開発完了**: 実装・単体テスト完了
- **テスト完了**: 統合・受入テスト完了
- **リリース**: 本番環境への展開完了

## 🔧 開発環境管理

### 環境統一
```dockerfile
# Dockerfile例
FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production
COPY . .
EXPOSE 3000
CMD ["npm", "start"]
```

### 設定管理
```javascript
// config.js
const config = {
  development: {
    database: process.env.DEV_DATABASE_URL,
    logLevel: 'debug'
  },
  production: {
    database: process.env.PROD_DATABASE_URL,
    logLevel: 'info'
  }
};
```

## 🚨 インシデント管理

### 対応レベル
- **レベル1**: サービス停止（即座対応）
- **レベル2**: 機能制限（1時間以内）
- **レベル3**: 軽微な問題（24時間以内）

### 対応手順
1. **検知**: 監視アラート・ユーザー報告
2. **初動**: 影響範囲の確認・関係者への通知
3. **対応**: 原因調査・修正・検証
4. **復旧**: サービス復旧・動作確認
5. **報告**: 事後レポート・改善策検討

## 📊 成果測定

### 開発生産性指標
- **ベロシティ**: スプリントあたりの完了ストーリーポイント
- **リードタイム**: 要求から本番リリースまでの時間
- **デプロイ頻度**: 週/月あたりのデプロイ回数
- **障害復旧時間**: 障害発生から復旧までの時間

### 品質指標
- **バグ発生率**: リリース後のバグ発見数
- **顧客満足度**: ユーザーフィードバック
- **テスト効率**: テストで発見されるバグの割合
- **技術的負債**: リファクタリング必要箇所

---

**効果的なプロジェクト管理により、品質の高いソフトウェアを継続的に提供できます。チーム全体で品質意識を共有し、改善を続けることが重要です。**
