---
description: "構造化ログ・思考プロセス標準化 - JSONログ、エラーハンドリング、監視システム連携"
auto_attachments: ["**/*.log", "**/logging.{js,py,ts}", "**/logger.*", "**/*log*.{js,py,ts}"]
---

# structured-logging.mdc - 構造化ログ・思考プロセス標準化

## 🎯 構造化応答フレームワーク

### 必須応答構造
```
1. 📁 参照ファイル明示
2. 🎯 タスク分析セクション
3. 📋 実行計画
4. ⚠️ 制約・要件
5. 💡 潜在的課題
6. ✅ 実行ステップ
```

## 📁 参照ファイル明示ルール

### 必須形式
```markdown
**参照したファイル:** `filename.ext`
**参照理由:** [なぜこのファイルを参照したか]
**影響範囲:** [このファイルの変更が及ぼす影響]
```

### 例
```markdown
**参照したファイル:** `.cursor/rules/global.mdc`
**参照理由:** プロジェクト固有ルール確認
**影響範囲:** 全プロジェクトファイルに適用
```

## 🎯 タスク分析セクション

### 必須構造
```markdown
<タスク分析>
**主要なタスク:** [具体的なタスク内容]
**守るべきルール:** [適用すべきルール]
**重要な要件:**
- [要件1]
- [要件2]
- [要件3]

**制約:**
- [制約1]
- [制約2]

**潜在的な課題:**
- [課題1とその対策]
- [課題2とその対策]

**実行ステップ:**
1. [ステップ1]
2. [ステップ2]
3. [ステップ3]
</タスク分析>
```

## 📋 実行計画の体系化

### 段階的実行フレームワーク
```
Phase 1: 📊 現状分析
├── 既存ファイル確認
├── 依存関係チェック
└── 潜在的競合調査

Phase 2: 🔧 実装準備
├── 必要ツール確認
├── 設定ファイル準備
└── バックアップ作成

Phase 3: 🚀 実行
├── 段階的実装
├── 動作確認
└── 最適化調整

Phase 4: ✅ 検証
├── 機能テスト
├── 性能確認
└── 品質保証
```

## ⚠️ 制約・要件の明確化

### 制約カテゴリ
- **技術的制約**: 既存システムとの互換性
- **運用制約**: 本番環境への影響
- **時間制約**: 実行時間の制限
- **リソース制約**: メモリ・CPU使用量

### 要件カテゴリ
- **機能要件**: 実現すべき機能
- **性能要件**: 速度・レスポンス
- **品質要件**: 可用性・信頼性
- **セキュリティ要件**: 認証・認可

## 💡 潜在的課題の予測

### 課題分類
```
🔴 Critical: システム停止リスク
🟡 Warning: 性能劣化リスク
🟢 Info: 軽微な影響
```

### 対策パターン
- **予防策**: 事前の対策
- **軽減策**: 影響を最小化
- **回復策**: 問題発生時の対応
- **監視策**: 早期発見方法

## 📊 品質メトリクス

### 応答品質指標
- **構造化度**: 必須セクション完成率
- **明確性**: 曖昧な表現の削減
- **実行可能性**: 具体的ステップの提供
- **予測精度**: 潜在的課題の的中率

## 🎯 実装例

### ❌ 悪い例
```
ファイルを確認して、必要な変更を行います。
```

### ✅ 良い例
```
**参照したファイル:** `package.json`
**参照理由:** 依存関係の確認

<タスク分析>
**主要なタスク:** Next.js 14プロジェクトへのstagewise導入
**守るべきルール:** 既存構造の保持、開発モードのみ
**重要な要件:**
- VSCode拡張機能のインストール
- NPMパッケージのインストール
- Next.js用ツールバーコンポーネント設定

**制約:**
- 本番環境に影響しない
- 既存UIコンポーネントとの競合回避

**潜在的な課題:**
- パフォーマンス影響 → 開発モードのみ有効化で対応
- 既存ツールバーとの競合 → z-indexとCSS分離で対応

**実行ステップ:**
1. 現在の依存関係確認
2. stagewiseパッケージインストール
3. Next.jsレイアウト更新
4. 動作確認とテスト
</タスク分析>

Phase 1: 📊 現状分析を実行します...
```

## 🔄 継続改善

### フィードバックループ
1. **実行結果の記録**
2. **予測と実際の比較**
3. **改善点の抽出**
4. **次回実行への反映**

### 学習システム統合
- **78回ミス学習システム**との連携
- **成功パターン**の蓄積
- **予測精度**の向上
- **効率化**の実現
