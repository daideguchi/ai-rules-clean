# project-config.example.mdc - プロジェクト設定例

## 📋 プロジェクト基本情報

### プロジェクト名
```
プロジェクト名: CODING-RULE2
バージョン: 1.0.0
開発期間: 2024-01-01 - 2024-12-31
```

### 技術スタック
```
メイン言語: Python 3.8+
フレームワーク: なし（カスタムスクリプト）
データベース: PostgreSQL + pgvector
インフラ: ローカル開発環境
デプロイ環境: ローカル
```

## 🎯 要件定義

### 機能要件
```
# 必須機能
- AI組織による自律的プロジェクト管理
- 継続学習システム（78回ミス学習）
- 統合開発環境（コード・ドキュメント・スクリプト）
- 品質保証システム（フック・チェックリスト）

# 任意機能
- Claude Code CLI統合
- MCP（Model Context Protocol）対応
- GitHub統合
```

### 非機能要件
```
# パフォーマンス要件
- ページ読み込み時間: 3秒以内
- 同時接続数: 10人以上
- 可用性: 99.9%以上

# セキュリティ要件
- 認証方式: PRESIDENT AI認証システム
- データ暗号化: AES-256
- 脆弱性対応: OWASP Top 10準拠

# UI/UX要件
- 対応デバイス: Desktop, Mobile
- ブラウザ対応: Chrome, Firefox, Safari
- アクセシビリティ: WCAG 2.1 AA準拠
```

## 📖 仕様書・設計書

### API仕様
```
# RESTful API
- ベースURL: http://localhost:8000/api
- 認証方式: Bearer Token
- レスポンス形式: JSON

# GraphQL（使用しない）
- エンドポイント: なし
- スキーマ管理: なし
```

### データベース設計
```
# テーブル設計
- ユーザー管理: president_users
- 権限管理: roles_permissions
- 業務データ: project_memory, task_records

# インデックス戦略
- 検索用インデックス: vector_search (pgvector)
- パフォーマンス用: timestamp_index, status_index
```

### アーキテクチャ
```
# システム構成
- フロントエンド: 標準的なHTML/CSS/JavaScript
- バックエンド: Python スクリプト群
- データベース: PostgreSQL with pgvector
- キャッシュ: JSON Lines + メモリキャッシュ
```

## 🎨 ユーザー希望ルール

### コーディング規約
```
# 命名規約
- 変数名: snake_case
- 関数名: snake_case
- クラス名: PascalCase
- ファイル名: kebab-case.py

# コメント規約
- 日本語コメント: YES
- ドキュメント生成: Sphinx
- TODO管理: GitHub Issues
```

### テスト戦略
```
# テストレベル
- 単体テスト: pytest
- 統合テスト: pytest + Docker
- E2Eテスト: Selenium

# カバレッジ目標
- 最低カバレッジ: 70%
- 目標カバレッジ: 85%
```

### チーム運用ルール
```
# Git運用
- ブランチ戦略: Git Flow
- コミットメッセージ: Conventional Commits
- プルリクエスト: レビュー必須

# レビュー規約
- レビュー必須: YES
- 承認者数: 1人以上
- レビュー項目: 機能性、保守性、セキュリティ
```

## 🔧 開発環境設定

### 必須ツール
```
# 開発ツール
- エディタ: Cursor
- パッケージマネージャー: pip
- ビルドツール: Make
- 仮想化: Python venv

# 品質保証ツール
- リンター: flake8, pylint
- フォーマッター: black
- 型チェッカー: mypy
```

### CI/CD設定
```
# 自動化項目
- ビルド自動化: Makefile
- テスト自動化: pytest
- デプロイ自動化: shell scripts
- 品質チェック: pre-commit hooks
```

## 🚨 プロジェクト固有の制約

### 技術的制約
```
# 制約事項
- 使用禁止技術: なし
- 推奨技術: Python, PostgreSQL, Git
- ライセンス制約: MIT License
- パフォーマンス制約: メモリ使用量 < 1GB
```

### 業務制約
```
# 業務ルール
- 営業時間: 24時間対応
- メンテナンス時間: 土日 02:00-04:00
- データ保持期間: 無制限
- 法的要件: 個人情報保護法準拠
```

## 📊 成功指標・KPI

### 技術指標
```
# 品質指標
- バグ発生率: 月1件以下
- 障害復旧時間: 1時間以内
- セキュリティ指標: 脆弱性0件

# パフォーマンス指標
- 応答時間: 2秒以内
- スループット: 100req/s以上
- 稼働率: 99.9%以上
```

### ビジネス指標
```
# 利用指標
- アクティブユーザー: 1人以上（開発者）
- 継続利用率: 100%
- 満足度: 4.5/5.0以上
```

## 🎯 PRESIDENT AI システム固有ルール

### AI組織システム
```
# AI役割分担
- PRESIDENT: 統括・意思決定
- WORKER1: 技術実装
- WORKER2: 文書作成
- WORKER3: 品質保証

# 学習システム
- 78回ミス学習: 過去のミス防止
- ベクトル検索: 類似問題検索
- 継続学習: 成功パターン学習
```

### セッション管理
```
# セッション開始プロトコル
- startup_checklist.md確認
- PRESIDENT宣言実行
- globals.mdc確認
- プロジェクト状態確認

# 記録システム
- 全作業記録: JSON Lines形式
- 状態永続化: PostgreSQL
- バックアップ: 定期的な自動バックアップ
```

### プロジェクト構造
```
# Function-Based Grouping
- agents/: AIエージェントシステム
- config/: 設定管理
- docs/: ドキュメント
- memory/: メモリ継承システム
- operations/: 運用・ログ管理
- scripts/: 開発ツール
- src/: コアソース
- tests/: テストハーネス
```

## 🔧 カスタマイズ手順

### 1. 基本情報設定
```
1. プロジェクト名を「YOUR_PROJECT_NAME」に変更
2. 技術スタックを実際の構成に更新
3. 要件定義を具体的に記述
```

### 2. AI システム設定
```
1. AI役割分担を定義
2. 学習システムを設定
3. セッション管理ルールを決定
```

### 3. 開発環境設定
```
1. 開発ツールを選択・設定
2. CI/CDパイプラインを構築
3. 品質保証ツールを導入
```

### 4. 運用設定
```
1. 監視・ログ設定
2. バックアップ設定
3. セキュリティ設定
```

---

**この設定例を参考にして、あなたのプロジェクトに合わせてカスタマイズしてください。**
**template/project-config.template.mdc をコピーして、プロジェクト固有の設定を作成してください。**
