#!/usr/bin/env python3
"""
üî¥ Mandatory Process Enforcer
============================

Enforces CLAUDE.md directives as absolute requirements.
"""

import json
from pathlib import Path


class ProcessEnforcer:
    """Enforces mandatory processes from CLAUDE.md"""

    def __init__(self):
        self.project_root = Path(__file__).parent.parent.parent
        self.claude_md = self.project_root / "CLAUDE.md"
        self.violations = []

    def enforce_president_declaration(self) -> bool:
        """Enforce PRESIDENT declaration requirement"""
        president_file = (
            self.project_root / "runtime" / "unified-president-declare.json"
        )

        if not president_file.exists():
            self.violations.append("PRESIDENT declaration missing")
            return False

        try:
            with open(president_file) as f:
                data = json.load(f)
                if data.get("status") != "success":
                    self.violations.append("PRESIDENT declaration failed")
                    return False
        except Exception as e:
            self.violations.append(f"PRESIDENT declaration invalid: {e}")
            return False

        return True

    def enforce_technical_response_only(self, response_text: str) -> bool:
        """Enforce technical response only protocol"""

        # Banned phrases (excuse-making language)
        banned_phrases = [
            "Áî≥„ÅóË®≥„ÅÇ„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü",
            "ÁêÜÁî±„ÇíËÄÉ„Åà„Çã„Å®",
            "ÁßÅ„ÅåÊåáÁ§∫„ÇíÊ≠£Á¢∫„Å´ÁêÜËß£„Åó„Å¶„ÅÑ„Å™„Åã„Å£„Åü",
            "ÂÆüË£ÖÊôÇ„Å´Á∞°Áï•Âåñ„Åó„Å¶„Åó„Åæ„Å£„Åü",
            "Ë¶ÅÊ±Ç„ÇíË¶ãËêΩ„Å®„Åó„Åü",
            "ÊäÄË°ìÁöÑÂà∂Á¥Ñ„Åå„ÅÇ„Çã„Å®ÊÄù„ÅÑËæº„Çì„Å†",
            "ÁßÅ„ÅÆÊÄùËÄÉ„Åå",
            "ÁßÅ„ÅØÂÆüË£Ö‰∏≠„Å´",
            "Ë®òÊÜ∂„Å´È†º„Å£„Å¶",
        ]

        for phrase in banned_phrases:
            if phrase in response_text:
                self.violations.append(f"Banned excuse phrase: {phrase}")
                return False

        return True

    def get_violations(self) -> list:
        """Get current violations"""
        return self.violations

    def clear_violations(self):
        """Clear violation list"""
        self.violations = []


def main():
    """Test enforcement"""
    enforcer = ProcessEnforcer()

    print("üî¥ Process Enforcement Check")
    print("=" * 30)

    # Check PRESIDENT
    president_ok = enforcer.enforce_president_declaration()
    print(f"PRESIDENT Declaration: {'‚úÖ' if president_ok else '‚ùå'}")

    # Show violations
    violations = enforcer.get_violations()
    if violations:
        print("\n‚ùå Violations:")
        for v in violations:
            print(f"  ‚Ä¢ {v}")
    else:
        print("‚úÖ All processes compliant")


if __name__ == "__main__":
    main()
