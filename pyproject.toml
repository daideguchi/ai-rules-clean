[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-control-rules-template"
version = "1.0.0"
description = "AI Behavior Control Rules - Portable Template"
authors = [{name = "AI Control Team", email = "team@ai-control.example"}]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8"
dependencies = [
    "google-generativeai>=0.8.0",
    "psycopg2-binary>=2.9.0",
    "requests>=2.28.0",
    "pydantic>=2.0.0",
    "python-dotenv>=1.0.0",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License", 
    "Programming Language :: Python :: 3",
    "Topic :: Software Development :: Libraries",
]

[project.optional-dependencies]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
]
dev = [
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

[project.urls]
Homepage = "https://github.com/ai-control/rules-template"
Repository = "https://github.com/ai-control/rules-template"
Documentation = "https://ai-control.github.io/rules-template"

[tool.setuptools.packages.find]
where = ["src"]

[project.scripts]
ai-setup = "scripts.setup:main"
ai-deploy = "scripts.deploy:main"
ai-validate = "scripts.validate:main"

[tool.ai-control]
template_mode = true
portable = true
min_python_version = "3.8"
target_environments = ["dev", "staging", "prod"]

[tool.ai-control.directories]
source = "src"
tests = "tests"  
docs = "docs"
config = "config"
scripts = "scripts"
data = "data"
models = "models"
ops = "ops"
runtime = "runtime"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-config",
    "--strict-markers",
]
# Treat skipped tests as success (exit code 0)
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py38"
line-length = 88
respect-gitignore = true

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # Allow `raise` without `from` inside `except`
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"
skip-magic-trailing-comma = false
docstring-code-format = false

[tool.ruff.lint.isort]
known-first-party = ["src"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true
exclude = [
    "scripts/janitor-bot\\.py",
    "scripts/maintenance/janitor-bot\\.py",
    "build/",
    "dist/",
    "\\.git/",
    "\\.mypy_cache/",
    "\\.tox/",
    "\\.venv/",
]
explicit_package_bases = true

[tool.ai-control.rules]
max_root_files = 5
max_root_dirs = 9
require_readme = true
require_gitignore = true
