{
  "metadata": {
    "version": "1.0",
    "created_at": "2025-07-15T17:31:34.832321",
    "description": "Unified configuration for coding-rule2 project"
  },
  "system": {
    "name": "coding-rule2",
    "environment": "development",
    "debug": false
  },
  "database": {
    "postgresql": {
      "host": "localhost",
      "port": 5432,
      "database": "coding_rule2_ai",
      "user": "dd",
      "password": ""
    },
    "supabase": {
      "url": "http://127.0.0.1:54321",
      "anon_key": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0"
    }
  },
  "api_keys": {
    "version": "1.0.0",
    "keys": {
      "gemini_api": {
        "service": "Google Gemini",
        "env_var": "GEMINI_API_KEY",
        "key_hash": "c34cdce7b1ed665baed8f6d825540a9c77a4f2517bdb2313b61bc742ad5ab93f",
        "description": "Gemini API for AI integration",
        "registered_at": "2025-07-08T00:20:55.481107",
        "last_rotated": "2025-07-08T00:20:55.481108",
        "rotation_days": 90,
        "access_count": 0
      }
    },
    "access_policies": {
      "gemini_api": {
        "max_requests_per_hour": 1000,
        "allowed_operations": [
          "read",
          "write"
        ],
        "ip_whitelist": [],
        "require_audit": true
      }
    },
    "rotation_schedule": {},
    "created_at": "2025-07-08T00:20:55.481089"
  },
  "mcp": {
    "mcpServers": {
      "o3": {
        "command": "npx",
        "args": [
          "o3-search-mcp"
        ],
        "env": {
          "OPENAI_API_KEY": "${OPENAI_API_KEY}",
          "SEARCH_CONTEXT_SIZE": "medium",
          "REASONING_EFFORT": "medium"
        }
      },
      "gemini-custom": {
        "command": "python3",
        "args": [
          "/Users/dd/Desktop/1_dev/coding-rule2/scripts/mcp/gemini_mcp_server.py"
        ],
        "env": {
          "GEMINI_API_KEY": "${GEMINI_API_KEY}"
        }
      },
      "slack-integration": {
        "command": "python3",
        "args": [
          "/Users/dd/Desktop/1_dev/coding-rule2/scripts/mcp/slack_mcp_server.py"
        ],
        "env": {
          "SLACK_CLIENT_ID": "${SLACK_CLIENT_ID}",
          "SLACK_CLIENT_SECRET": "${SLACK_CLIENT_SECRET}",
          "SLACK_SIGNING_SECRET": "${SLACK_SIGNING_SECRET}",
          "SLACK_APP_ID": "${SLACK_APP_ID}",
          "SLACK_BOT_TOKEN": "${SLACK_BOT_TOKEN}"
        },
        "description": "Slack integration for Claude Code notifications and team communication"
      },
      "slack-mcp-server": {
        "command": "npx",
        "args": ["-y", "@modelcontextprotocol/server-slack"],
        "env": {
          "SLACK_BOT_TOKEN": "${SLACK_BOT_TOKEN}",
          "SLACK_TEAM_ID": "${SLACK_TEAM_ID}",
          "SLACK_CHANNEL_IDS": "${SLACK_CHANNEL_IDS}"
        },
        "description": "Official Slack MCP server for enhanced Claude Code integration"
      }
    }
  },
  "logging": {
    "level": "INFO",
    "format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    "handlers": [
      "console",
      "database"
    ],
    "database_logging": true
  },
  "security": {
    "rbac": {
      "version": "1.0.0",
      "role_permissions": {
        "guest": [
          "read"
        ],
        "user": [
          "read",
          "write"
        ],
        "developer": [
          "read",
          "write",
          "delete",
          "execute"
        ],
        "ai_worker": [
          "read",
          "write",
          "execute",
          "ai_create_model",
          "ai_train_model",
          "ai_access_memory"
        ],
        "ai_president": [
          "read",
          "write",
          "delete",
          "execute",
          "ai_create_model",
          "ai_train_model",
          "ai_deploy_model",
          "ai_access_memory",
          "ai_modify_system",
          "president_declare",
          "president_modify_rules",
          "president_override"
        ],
        "system_admin": [
          "read",
          "write",
          "delete",
          "execute",
          "admin",
          "system_config",
          "system_backup",
          "system_restore",
          "system_monitoring"
        ],
        "security_admin": [
          "read",
          "write",
          "delete",
          "execute",
          "admin",
          "system_config",
          "system_monitoring"
        ]
      },
      "user_roles": {
        "ai_president_001": [
          "ai_president"
        ]
      },
      "role_hierarchy": {
        "guest": [],
        "user": [
          "guest"
        ],
        "developer": [
          "user"
        ],
        "ai_worker": [
          "user"
        ],
        "ai_president": [
          "ai_worker",
          "developer"
        ],
        "system_admin": [
          "developer"
        ],
        "security_admin": [
          "system_admin"
        ]
      },
      "access_policies": {},
      "created_at": "2025-07-08T00:21:01.335747"
    },
    "encryption_key_path": "config/security/.encryption_key"
  },
  "integrations": {
    "environment_isolation": {
      "strategy": "docker_compose",
      "fallback": "venv_namespace",
      "database_isolation": "separate_instance"
    },
    "conflict_prevention": {
      "python_env": {
        "use_docker": true,
        "venv_prefix": "misaip_",
        "requirements_namespace": "88mistake_prevention"
      },
      "database": {
        "isolation_method": "separate_database",
        "db_name_pattern": "{project_name}_misaip_ai",
        "port_offset": 1000,
        "data_volume": "misaip_data"
      },
      "file_system": {
        "base_path": "./misaip",
        "runtime_path": "./misaip/runtime",
        "logs_path": "./misaip/logs",
        "exclude_patterns": [
          "node_modules",
          "venv",
          "__pycache__"
        ]
      }
    },
    "integration_modes": {
      "production": {
        "isolation": "container",
        "network": "internal",
        "volumes": [
          "misaip_data",
          "misaip_logs"
        ],
        "environment": "MISAIP_MODE=production"
      },
      "development": {
        "isolation": "venv",
        "shared_db": false,
        "debug_logging": true
      },
      "testing": {
        "isolation": "memory",
        "ephemeral_db": true,
        "mock_external": true
      }
    },
    "safety_checks": {
      "pre_install": [
        "check_existing_python_env",
        "check_db_conflicts",
        "check_port_availability"
      ],
      "post_install": [
        "verify_isolation",
        "test_basic_functions",
        "check_resource_usage"
      ]
    }
  },
  "claude": {
    "memory_code": "7749",
    "enforcement_level": "strict",
    "thinking_required": true,
    "template_required": true
  },
  "file_management": {
    "max_python_files": 500,
    "max_markdown_files": 350,
    "max_total_files": 1000,
    "auto_cleanup": true
  },
  "monitoring": {
    "enabled": true,
    "metrics_collection": true,
    "performance_tracking": true
  }
}
