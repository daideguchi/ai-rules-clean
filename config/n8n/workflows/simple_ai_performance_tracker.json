{
  "name": "Simple AI Performance Tracker",
  "active": true,
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "claude-performance",
        "options": {}
      },
      "name": "Claude Performance Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [300, 300],
      "webhookId": "claude-performance"
    },
    {
      "parameters": {
        "functionCode": "// Claude Code Hook からのパフォーマンスデータ処理\nconst hookData = items[0].json;\n\n// パフォーマンス指標計算\nconst performance = {\n  session_id: hookData.session_id || new Date().getTime(),\n  timestamp: new Date().toISOString(),\n  \n  // 基本指標\n  task_success: hookData.success || false,\n  execution_time: hookData.execution_time || 0,\n  tool_calls: hookData.tools_used || [],\n  error_count: hookData.errors?.length || 0,\n  \n  // 品質指標\n  thinking_tag_used: hookData.thinking_tag_used || false,\n  todo_tracking: hookData.todo_tracking || false,\n  proper_file_reading: hookData.proper_file_reading || false,\n  \n  // コンテキスト\n  task_complexity: hookData.task_complexity || 'simple',\n  user_feedback: hookData.user_feedback || null,\n  \n  // 処理結果\n  processed_at: new Date().toISOString(),\n  status: 'processed'\n};\n\n// 成功パターン分析\nif (performance.task_success) {\n  performance.success_patterns = [];\n  \n  if (performance.thinking_tag_used) \n    performance.success_patterns.push('thinking_tag_usage');\n  if (performance.todo_tracking) \n    performance.success_patterns.push('todo_tracking');\n  if (performance.proper_file_reading) \n    performance.success_patterns.push('read_before_edit');\n  if (performance.error_count === 0) \n    performance.success_patterns.push('error_free_execution');\n}\n\n// 失敗パターン分析  \nif (!performance.task_success) {\n  performance.failure_patterns = [];\n  \n  if (!performance.thinking_tag_used) \n    performance.failure_patterns.push('missing_thinking_tag');\n  if (performance.error_count > 0) \n    performance.failure_patterns.push('execution_errors');\n}\n\n// 学習シグナル生成\nperformance.learning_signal = {\n  type: performance.task_success ? 'positive' : 'negative',\n  strength: performance.task_success ? performance.success_patterns?.length || 1 : performance.failure_patterns?.length || 1,\n  patterns: performance.task_success ? performance.success_patterns : performance.failure_patterns\n};\n\nconsole.log('AI Performance Processed:', performance);\n\nreturn [{ json: performance }];"
      },
      "name": "Process Performance Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [500, 300]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.task_success}}",
              "value2": true
            }
          ]
        }
      },
      "name": "Check Success",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [700, 250]
    },
    {
      "parameters": {
        "functionCode": "// 成功パターンログ\nconst item = items[0].json;\n\nconst successLog = {\n  timestamp: new Date().toISOString(),\n  type: 'success_pattern',\n  session_id: item.session_id,\n  patterns: item.success_patterns || [],\n  execution_time: item.execution_time,\n  tools_used: item.tool_calls?.length || 0,\n  learning_signal: 'positive'\n};\n\nconsole.log('Success Pattern Logged:', successLog);\n\n// AI学習向上のためのレスポンス\nreturn [{ \n  json: {\n    status: 'success_logged',\n    message: 'AI learning enhanced with success pattern',\n    data: successLog\n  }\n}];"
      },
      "name": "Log Success Pattern",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 200]
    },
    {
      "parameters": {
        "functionCode": "// 失敗パターンログ\nconst item = items[0].json;\n\nconst failureLog = {\n  timestamp: new Date().toISOString(),\n  type: 'failure_pattern',\n  session_id: item.session_id,\n  patterns: item.failure_patterns || [],\n  error_count: item.error_count,\n  improvement_needed: true,\n  learning_signal: 'negative'\n};\n\nconsole.log('Failure Pattern Logged:', failureLog);\n\n// AI改善のためのレスポンス\nreturn [{ \n  json: {\n    status: 'failure_logged',\n    message: 'AI learning enhanced with failure analysis',\n    data: failureLog\n  }\n}];"
      },
      "name": "Log Failure Pattern",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 350]
    },
    {
      "parameters": {
        "options": {}
      },
      "name": "Performance Logged",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [1100, 275]
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "name": "Send Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1300, 275]
    }
  ],
  "connections": {
    "Claude Performance Webhook": {
      "main": [
        [
          {
            "node": "Process Performance Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Performance Data": {
      "main": [
        [
          {
            "node": "Check Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Success": {
      "main": [
        [
          {
            "node": "Log Success Pattern",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Failure Pattern",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Success Pattern": {
      "main": [
        [
          {
            "node": "Performance Logged",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Failure Pattern": {
      "main": [
        [
          {
            "node": "Performance Logged",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Performance Logged": {
      "main": [
        [
          {
            "node": "Send Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "name": "ai-growth",
      "id": "ai-growth-simple"
    }
  ],
  "meta": {
    "templateCredsSetupCompleted": true
  }
}